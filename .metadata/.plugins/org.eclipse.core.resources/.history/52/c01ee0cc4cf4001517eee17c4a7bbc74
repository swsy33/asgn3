import java.util.*;

public class AStar {
	public static final int DIAGONAL_COST = 14;
	public static  final int V_H_COST = 10;

	class Cell{  
		int heuristicCost = 0; //Heuristic cost
		int finalCost = 0; //G+H
		int i, j;
		Cell parent; 

		Cell(int i, int j){
			this.i = i;
			this.j = j; 
		}

		@Override
		public String toString(){
			return "["+this.i+", "+this.j+"]";
		}
	}

	//Blocked cells are just null Cell values in grid
	Cell [][] grid;

	PriorityQueue<Cell> open;

	boolean closed[][];
	int startI, startJ;
	int endI, endJ;

	public void initGrid(MarsMatrix mm)
	{
		grid = new Cell[mm.getHeightInMatrix()][mm.getWidthInMatrix()];

	}
	public void setBlocked(int i, int j){
		grid[i][j] = null;
	}

	public void setStartCell(int i, int j){
		startI = i;
		startJ = j;
	}

	public void setEndCell(int i, int j){
		endI = i;
		endJ = j; 
	}

	void checkAndUpdateCost(Cell current, Cell t, int cost){
		if(t == null || closed[t.i][t.j])return;
		int t_final_cost = t.heuristicCost+cost;

		boolean inOpen = open.contains(t);
		if(!inOpen || t_final_cost<t.finalCost){
			t.finalCost = t_final_cost;
			t.parent = current;
			if(!inOpen)open.add(t);
		}
	}

	public void findPath()
	{ 
		//add the start location to open list.
		open.add(grid[startI][startJ]);

		Cell current;

		while(true){ 
			current = open.poll();
			if(current==null)break;
			closed[current.i][current.j]=true; 

			if(current.equals(grid[endI][endJ])){
				return; 
			} 

			Cell t;  
			if(current.i-1>=0){
				t = grid[current.i-1][current.j];
				checkAndUpdateCost(current, t, current.finalCost+V_H_COST); 

				if(current.j-1>=0){                      
					t = grid[current.i-1][current.j-1];
					checkAndUpdateCost(current, t, current.finalCost+DIAGONAL_COST); 
				}

				if(current.j+1<grid[0].length){
					t = grid[current.i-1][current.j+1];
					checkAndUpdateCost(current, t, current.finalCost+DIAGONAL_COST); 
				}
			} 

			if(current.j-1>=0){
				t = grid[current.i][current.j-1];
				checkAndUpdateCost(current, t, current.finalCost+V_H_COST); 
			}

			if(current.j+1<grid[0].length){
				t = grid[current.i][current.j+1];
				checkAndUpdateCost(current, t, current.finalCost+V_H_COST); 
			}

			if(current.i+1<grid.length){
				t = grid[current.i+1][current.j];
				checkAndUpdateCost(current, t, current.finalCost+V_H_COST); 

				if(current.j-1>=0){
					t = grid[current.i+1][current.j-1];
					checkAndUpdateCost(current, t, current.finalCost+DIAGONAL_COST); 
				}

				if(current.j+1<grid[0].length){
					t = grid[current.i+1][current.j+1];
					checkAndUpdateCost(current, t, current.finalCost+DIAGONAL_COST); 
				}  
			}
		} 
	}

	/*
    Params :
    tCase = test case No.
    x, y = Board's dimensions
    si, sj = start location's x and y coordinates
    ei, ej = end location's x and y coordinates
    int[][] blocked = array containing inaccessible cell coordinates
	 */
	public void test(int tCase, MarsMatrix mm, int si, int sj, int ei, int ej)//, int[][] blocked)
	{
		System.out.println("\n\nTest Case #"+tCase);
		//Reset
		//grid = new Cell[x][y];
		initGrid(mm);
		int x = mm.getHeightInMatrix();
		int y = mm.getWidthInMatrix();
		closed = new boolean[x][y];

		open = new PriorityQueue<>((Object o1, Object o2) -> {
			Cell c1 = (Cell)o1;
			Cell c2 = (Cell)o2;

			return c1.finalCost<c2.finalCost?-1:
				c1.finalCost>c2.finalCost?1:0;
		});
		//Set start position
		setStartCell(si, sj);  //Setting to 0,0 by default. Will be useful for the UI part
		System.out.println("Start: "+ mm.getCell(si, sj)+ " " + si + "," + sj);
		//Set End Location
		setEndCell(ei, ej); 
		System.out.println("End: "+ mm.getCell(ei, ej)+ " " + ei + "," + ej);
		for(int i=0;i<x;i++){
			for(int j=0;j<y;j++){
				grid[i][j] = new Cell(i, j);
				grid[i][j].heuristicCost = Math.abs(i-endI)+Math.abs(j-endJ);
				//                  System.out.print(grid[i][j].heuristicCost+" ");
			}
			//              System.out.println();
		}
		grid[si][sj].finalCost = 0;

		/*
             Set blocked cells. Simply set the cell values to null
             for blocked cells.
		 */
		//           for(int i=0;i<blocked.length;++i){
		//               setBlocked(blocked[i][0], blocked[i][1]);
		//           }
		for(int i = 0; i<mm.getHeightInMatrix(); i++)
		{
			for(int j = 0; j<mm.getWidthInMatrix();j++)
			{
				if(mm.getCell(i,j).equals("X"))
				{
					//System.out.println("here obstacle");
					setBlocked(i,j);
				}
			}
		}

		//Display initial map
		System.out.println("Grid: ");
		for(int i=0;i<x;i++){
			for(int j=0;j<y;j++){
				if(i==si&&j==sj)System.out.print("SO  "); //Source
				else if(i==ei && j==ej)System.out.print("DE  ");  //Destination
				else if(grid[i][j]!=null)System.out.printf("%-3d ", 0);
				else System.out.print("BL  "); 
			}
			System.out.println();
		} 
		System.out.println();

		findPath(); 
		System.out.println("\nScores for cells: ");
		for(int i=0;i<x;++i){
			for(int j=0;j<x;++j){
				if(grid[i][j]!=null)System.out.printf("%-3d ", grid[i][j].finalCost);
				else System.out.print("BL  ");
			}
			System.out.println();
		}
		System.out.println();

		if(closed[endI][endJ])
		{
			//Trace back the path 
			System.out.println("Path: ");
			Cell current = grid[endI][endJ];
			Stack<Cell> st = new Stack<Cell>();
			st.push(current);
			//System.out.print(current);
			while(current.parent!=null){
				//System.out.print(" -> "+current.parent);
				current = current.parent;
				st.push(current);
			} 
			printPathGraph(mm, st);
			String path="";
			while(!st.isEmpty())
			{
				path = path + st.pop() + "->";
			}
			path = path.substring(0, path.length()-2);
			System.out.print(path);
			System.out.println();
		}
		else 
			System.out.println("No possible path");


	}

	public void printPathGraph(MarsMatrix mm, Stack<Cell> st)
	{
		int[][] path = new int[st.size()][2];
		//Cell c = st.pop();
		int row = 0;
		while(!st.isEmpty())
		{
			path[row][0] = c.i;
			path[row][1] = c.j;
			c = st.pop()
		}
		for(int i = 0; i < mm.height; i++)
		{
			for(int j = 0; j< mm.width; j++)
			{
				
				if((c.i == i) &&(c.j==j))
				{
					System.out.print("@");
					c
				}
				else
				{
					System.out.print(mm.getCell(i, j));
				}
			}
			System.out.print("\n");
		}
	}

	public static void main(String[] args) throws Exception{   
		String filename = "/Users/sandra/Desktop/asgn3/map.txt";
		MapConverter mc = new MapConverter(filename);
		MarsMatrix mm = new MarsMatrix(mc.getMatrix());
		//mc.printMatrix();
		AStar as = new AStar();
		as.test(1, mm, 16, 1, 16, 31);
		as.test(2, mm,16,1, 0,24);   

	}
}
